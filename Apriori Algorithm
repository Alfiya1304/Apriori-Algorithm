{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9594046,"sourceType":"datasetVersion","datasetId":5852075}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Import necessary libraries\nimport pandas as pd\nfrom mlxtend.frequent_patterns import apriori, association_rules\nfrom IPython.display import display  # Import display for better output\n\n# Load the dataset from the uploaded Excel file\ndf = pd.read_excel('/kaggle/input/apriori-algorithm/Large_Market_Basket_Apriori.xlsx')\n\n# Display the first few rows to check the data\ndisplay(df.head())","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-10T12:52:00.813246Z","iopub.execute_input":"2024-10-10T12:52:00.814380Z","iopub.status.idle":"2024-10-10T12:52:00.880627Z","shell.execute_reply.started":"2024-10-10T12:52:00.814331Z","shell.execute_reply":"2024-10-10T12:52:00.879317Z"},"trusted":true},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":"   TransactionID                      Items\n0              1                 Beer,Juice\n1              2       Cookies,Diaper,Bread\n2              3  Apples,Bread,Chicken,Milk\n3              4   Beer,Apples,Juice,Butter\n4              5               Cookies,Beer","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>TransactionID</th>\n      <th>Items</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Beer,Juice</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Cookies,Diaper,Bread</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Apples,Bread,Chicken,Milk</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Beer,Apples,Juice,Butter</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Cookies,Beer</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#  **Data Preprocessing**","metadata":{}},{"cell_type":"code","source":"# Assuming 'Items' column contains lists\n# Preprocess the dataset\nbasket = df.explode('Items').reset_index()  # No need to split again\nbasket['count'] = 1\n\n# Pivot the data to get the one-hot encoded format\nbasket_pivot = basket.pivot_table(index='index', columns='Items', values='count', fill_value=0)\n\n# Convert to boolean values (True/False)\nbasket_pivot = basket_pivot.astype(bool)\n\n# Display the one-hot encoded dataset\ndisplay(basket_pivot.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T12:59:44.749215Z","iopub.execute_input":"2024-10-10T12:59:44.750245Z","iopub.status.idle":"2024-10-10T12:59:44.783951Z","shell.execute_reply.started":"2024-10-10T12:59:44.750185Z","shell.execute_reply":"2024-10-10T12:59:44.782923Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"Items  Apples   Beer  Bread  Butter  Cheese  Chicken   Coke  Cookies  Diaper  \\\nindex                                                                          \n0       False   True  False   False   False    False  False    False   False   \n1       False  False   True   False   False    False  False     True    True   \n2        True  False   True   False   False     True  False    False   False   \n3        True   True  False    True   False    False  False    False   False   \n4       False   True  False   False   False    False  False     True   False   \n\nItems   Eggs  Juice   Milk  \nindex                       \n0      False   True  False  \n1      False  False  False  \n2      False  False   True  \n3      False   True  False  \n4      False  False  False  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Items</th>\n      <th>Apples</th>\n      <th>Beer</th>\n      <th>Bread</th>\n      <th>Butter</th>\n      <th>Cheese</th>\n      <th>Chicken</th>\n      <th>Coke</th>\n      <th>Cookies</th>\n      <th>Diaper</th>\n      <th>Eggs</th>\n      <th>Juice</th>\n      <th>Milk</th>\n    </tr>\n    <tr>\n      <th>index</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Apply the Apriori Algorithm**","metadata":{}},{"cell_type":"code","source":"# Apply the Apriori algorithm with a minimum support value of 0.05 (adjust as necessary)\nfrom mlxtend.frequent_patterns import apriori\n\nfrequent_itemsets = apriori(basket_pivot, min_support=0.05, use_colnames=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T13:03:22.712822Z","iopub.execute_input":"2024-10-10T13:03:22.713274Z","iopub.status.idle":"2024-10-10T13:03:22.725001Z","shell.execute_reply.started":"2024-10-10T13:03:22.713227Z","shell.execute_reply":"2024-10-10T13:03:22.723882Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"# **Display the Frequent Itemsets**","metadata":{}},{"cell_type":"code","source":"# Display the frequent itemsets\ndisplay(frequent_itemsets)","metadata":{"execution":{"iopub.status.busy":"2024-10-10T13:03:57.451973Z","iopub.execute_input":"2024-10-10T13:03:57.452377Z","iopub.status.idle":"2024-10-10T13:03:57.467534Z","shell.execute_reply.started":"2024-10-10T13:03:57.452340Z","shell.execute_reply":"2024-10-10T13:03:57.466340Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"    support         itemsets\n0     0.300         (Apples)\n1     0.302           (Beer)\n2     0.278          (Bread)\n3     0.294         (Butter)\n4     0.282         (Cheese)\n..      ...              ...\n73    0.058  (Juice, Diaper)\n74    0.056   (Milk, Diaper)\n75    0.080    (Juice, Eggs)\n76    0.076     (Milk, Eggs)\n77    0.082    (Milk, Juice)\n\n[78 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>support</th>\n      <th>itemsets</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.300</td>\n      <td>(Apples)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.302</td>\n      <td>(Beer)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.278</td>\n      <td>(Bread)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.294</td>\n      <td>(Butter)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.282</td>\n      <td>(Cheese)</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>0.058</td>\n      <td>(Juice, Diaper)</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>0.056</td>\n      <td>(Milk, Diaper)</td>\n    </tr>\n    <tr>\n      <th>75</th>\n      <td>0.080</td>\n      <td>(Juice, Eggs)</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>0.076</td>\n      <td>(Milk, Eggs)</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>0.082</td>\n      <td>(Milk, Juice)</td>\n    </tr>\n  </tbody>\n</table>\n<p>78 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Generate Association Rules**","metadata":{}},{"cell_type":"code","source":"from mlxtend.frequent_patterns import association_rules\n\n# Generate association rules\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T13:04:36.420237Z","iopub.execute_input":"2024-10-10T13:04:36.421084Z","iopub.status.idle":"2024-10-10T13:04:36.429909Z","shell.execute_reply.started":"2024-10-10T13:04:36.421037Z","shell.execute_reply":"2024-10-10T13:04:36.428815Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"# ** Display the Association Rules**","metadata":{}},{"cell_type":"code","source":"# Display the association rules\ndisplay(rules)","metadata":{"execution":{"iopub.status.busy":"2024-10-10T13:05:15.881097Z","iopub.execute_input":"2024-10-10T13:05:15.881676Z","iopub.status.idle":"2024-10-10T13:05:15.924314Z","shell.execute_reply.started":"2024-10-10T13:05:15.881630Z","shell.execute_reply":"2024-10-10T13:05:15.923146Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"   antecedents consequents  antecedent support  consequent support  support  \\\n0       (Coke)    (Apples)               0.288               0.300    0.088   \n1     (Apples)      (Coke)               0.300               0.288    0.088   \n2       (Beer)     (Bread)               0.302               0.278    0.084   \n3      (Bread)      (Beer)               0.278               0.302    0.084   \n4      (Bread)    (Diaper)               0.278               0.284    0.082   \n5     (Diaper)     (Bread)               0.284               0.278    0.082   \n6    (Chicken)    (Butter)               0.330               0.294    0.098   \n7     (Butter)   (Chicken)               0.294               0.330    0.098   \n8     (Butter)      (Coke)               0.294               0.288    0.090   \n9       (Coke)    (Butter)               0.288               0.294    0.090   \n10    (Butter)    (Diaper)               0.294               0.284    0.084   \n11    (Diaper)    (Butter)               0.284               0.294    0.084   \n12   (Chicken)    (Cheese)               0.330               0.282    0.096   \n13    (Cheese)   (Chicken)               0.282               0.330    0.096   \n14      (Milk)    (Cheese)               0.276               0.282    0.084   \n15    (Cheese)      (Milk)               0.282               0.276    0.084   \n16     (Juice)   (Cookies)               0.296               0.350    0.104   \n17   (Cookies)     (Juice)               0.350               0.296    0.104   \n18      (Milk)     (Juice)               0.276               0.296    0.082   \n19     (Juice)      (Milk)               0.296               0.276    0.082   \n\n    confidence      lift  leverage  conviction  zhangs_metric  \n0     0.305556  1.018519  0.001600    1.008000       0.025536  \n1     0.293333  1.018519  0.001600    1.007547       0.025974  \n2     0.278146  1.000524  0.000044    1.000202       0.000750  \n3     0.302158  1.000524  0.000044    1.000227       0.000725  \n4     0.294964  1.038606  0.003048    1.015551       0.051483  \n5     0.288732  1.038606  0.003048    1.015089       0.051914  \n6     0.296970  1.010101  0.000980    1.004224       0.014925  \n7     0.333333  1.010101  0.000980    1.005000       0.014164  \n8     0.306122  1.062925  0.005328    1.026118       0.083853  \n9     0.312500  1.062925  0.005328    1.026909       0.083146  \n10    0.285714  1.006036  0.000504    1.002400       0.008499  \n11    0.295775  1.006036  0.000504    1.002520       0.008380  \n12    0.290909  1.031593  0.002940    1.012564       0.045709  \n13    0.340426  1.031593  0.002940    1.015806       0.042653  \n14    0.304348  1.079248  0.006168    1.032125       0.101421  \n15    0.297872  1.079248  0.006168    1.031152       0.102268  \n16    0.351351  1.003861  0.000400    1.002083       0.005463  \n17    0.297143  1.003861  0.000400    1.001626       0.005917  \n18    0.297101  1.003721  0.000304    1.001567       0.005121  \n19    0.277027  1.003721  0.000304    1.001421       0.005266  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>antecedents</th>\n      <th>consequents</th>\n      <th>antecedent support</th>\n      <th>consequent support</th>\n      <th>support</th>\n      <th>confidence</th>\n      <th>lift</th>\n      <th>leverage</th>\n      <th>conviction</th>\n      <th>zhangs_metric</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(Coke)</td>\n      <td>(Apples)</td>\n      <td>0.288</td>\n      <td>0.300</td>\n      <td>0.088</td>\n      <td>0.305556</td>\n      <td>1.018519</td>\n      <td>0.001600</td>\n      <td>1.008000</td>\n      <td>0.025536</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(Apples)</td>\n      <td>(Coke)</td>\n      <td>0.300</td>\n      <td>0.288</td>\n      <td>0.088</td>\n      <td>0.293333</td>\n      <td>1.018519</td>\n      <td>0.001600</td>\n      <td>1.007547</td>\n      <td>0.025974</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(Beer)</td>\n      <td>(Bread)</td>\n      <td>0.302</td>\n      <td>0.278</td>\n      <td>0.084</td>\n      <td>0.278146</td>\n      <td>1.000524</td>\n      <td>0.000044</td>\n      <td>1.000202</td>\n      <td>0.000750</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(Bread)</td>\n      <td>(Beer)</td>\n      <td>0.278</td>\n      <td>0.302</td>\n      <td>0.084</td>\n      <td>0.302158</td>\n      <td>1.000524</td>\n      <td>0.000044</td>\n      <td>1.000227</td>\n      <td>0.000725</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(Bread)</td>\n      <td>(Diaper)</td>\n      <td>0.278</td>\n      <td>0.284</td>\n      <td>0.082</td>\n      <td>0.294964</td>\n      <td>1.038606</td>\n      <td>0.003048</td>\n      <td>1.015551</td>\n      <td>0.051483</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>(Diaper)</td>\n      <td>(Bread)</td>\n      <td>0.284</td>\n      <td>0.278</td>\n      <td>0.082</td>\n      <td>0.288732</td>\n      <td>1.038606</td>\n      <td>0.003048</td>\n      <td>1.015089</td>\n      <td>0.051914</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>(Chicken)</td>\n      <td>(Butter)</td>\n      <td>0.330</td>\n      <td>0.294</td>\n      <td>0.098</td>\n      <td>0.296970</td>\n      <td>1.010101</td>\n      <td>0.000980</td>\n      <td>1.004224</td>\n      <td>0.014925</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>(Butter)</td>\n      <td>(Chicken)</td>\n      <td>0.294</td>\n      <td>0.330</td>\n      <td>0.098</td>\n      <td>0.333333</td>\n      <td>1.010101</td>\n      <td>0.000980</td>\n      <td>1.005000</td>\n      <td>0.014164</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>(Butter)</td>\n      <td>(Coke)</td>\n      <td>0.294</td>\n      <td>0.288</td>\n      <td>0.090</td>\n      <td>0.306122</td>\n      <td>1.062925</td>\n      <td>0.005328</td>\n      <td>1.026118</td>\n      <td>0.083853</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>(Coke)</td>\n      <td>(Butter)</td>\n      <td>0.288</td>\n      <td>0.294</td>\n      <td>0.090</td>\n      <td>0.312500</td>\n      <td>1.062925</td>\n      <td>0.005328</td>\n      <td>1.026909</td>\n      <td>0.083146</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>(Butter)</td>\n      <td>(Diaper)</td>\n      <td>0.294</td>\n      <td>0.284</td>\n      <td>0.084</td>\n      <td>0.285714</td>\n      <td>1.006036</td>\n      <td>0.000504</td>\n      <td>1.002400</td>\n      <td>0.008499</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>(Diaper)</td>\n      <td>(Butter)</td>\n      <td>0.284</td>\n      <td>0.294</td>\n      <td>0.084</td>\n      <td>0.295775</td>\n      <td>1.006036</td>\n      <td>0.000504</td>\n      <td>1.002520</td>\n      <td>0.008380</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>(Chicken)</td>\n      <td>(Cheese)</td>\n      <td>0.330</td>\n      <td>0.282</td>\n      <td>0.096</td>\n      <td>0.290909</td>\n      <td>1.031593</td>\n      <td>0.002940</td>\n      <td>1.012564</td>\n      <td>0.045709</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>(Cheese)</td>\n      <td>(Chicken)</td>\n      <td>0.282</td>\n      <td>0.330</td>\n      <td>0.096</td>\n      <td>0.340426</td>\n      <td>1.031593</td>\n      <td>0.002940</td>\n      <td>1.015806</td>\n      <td>0.042653</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>(Milk)</td>\n      <td>(Cheese)</td>\n      <td>0.276</td>\n      <td>0.282</td>\n      <td>0.084</td>\n      <td>0.304348</td>\n      <td>1.079248</td>\n      <td>0.006168</td>\n      <td>1.032125</td>\n      <td>0.101421</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>(Cheese)</td>\n      <td>(Milk)</td>\n      <td>0.282</td>\n      <td>0.276</td>\n      <td>0.084</td>\n      <td>0.297872</td>\n      <td>1.079248</td>\n      <td>0.006168</td>\n      <td>1.031152</td>\n      <td>0.102268</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>(Juice)</td>\n      <td>(Cookies)</td>\n      <td>0.296</td>\n      <td>0.350</td>\n      <td>0.104</td>\n      <td>0.351351</td>\n      <td>1.003861</td>\n      <td>0.000400</td>\n      <td>1.002083</td>\n      <td>0.005463</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>(Cookies)</td>\n      <td>(Juice)</td>\n      <td>0.350</td>\n      <td>0.296</td>\n      <td>0.104</td>\n      <td>0.297143</td>\n      <td>1.003861</td>\n      <td>0.000400</td>\n      <td>1.001626</td>\n      <td>0.005917</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>(Milk)</td>\n      <td>(Juice)</td>\n      <td>0.276</td>\n      <td>0.296</td>\n      <td>0.082</td>\n      <td>0.297101</td>\n      <td>1.003721</td>\n      <td>0.000304</td>\n      <td>1.001567</td>\n      <td>0.005121</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>(Juice)</td>\n      <td>(Milk)</td>\n      <td>0.296</td>\n      <td>0.276</td>\n      <td>0.082</td>\n      <td>0.277027</td>\n      <td>1.003721</td>\n      <td>0.000304</td>\n      <td>1.001421</td>\n      <td>0.005266</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}